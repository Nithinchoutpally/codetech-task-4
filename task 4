from datetime import datetime, timedelta

class LibraryItem:
    def __init__(self, title, author, category):
        self.title = title
        self.author = author
        self.category = category
        self.checked_out = False
        self.due_date = None

class Library:
    def __init__(self):
        self.items = []
        self.fines_per_day = 1.0  # Fine for overdue items

    def add_item(self, title, author, category):
        item = LibraryItem(title, author, category)
        self.items.append(item)
        print(f"Added {category} - '{title}' by {author}.")

    def check_out(self, title):
        for item in self.items:
            if item.title == title and not item.checked_out:
                item.checked_out = True
                item.due_date = datetime.now() + timedelta(days=14)  # 2 weeks checkout
                print(f"You have checked out '{title}'. Due date: {item.due_date.strftime('%Y-%m-%d')}.")
                return
        print(f"'{title}' is either not available or already checked out.")

    def return_item(self, title):
        for item in self.items:
            if item.title == title and item.checked_out:
                item.checked_out = False
                overdue_days = (datetime.now() - item.due_date).days
                if overdue_days > 0:
                    fine = overdue_days * self.fines_per_day
                    print(f"Returned '{title}'. You have an overdue fine of ${fine:.2f}.")
                else:
                    print(f"Returned '{title}' on time. No fines.")
                item.due_date = None
                return
        print(f"'{title}' was not checked out.")

    def search_items(self, query):
        results = [item for item in self.items if query.lower() in item.title.lower() or query.lower() in item.author.lower() or query.lower() in item.category.lower()]
        if results:
            print("Search Results:")
            for item in results:
                status = "Checked out" if item.checked_out else "Available"
                print(f"'{item.title}' by {item.author} ({item.category}) - {status}")
        else:
            print("No items found.")

    def display_items(self):
        print("\nLibrary Items:")
        for item in self.items:
            status = "Checked out" if item.checked_out else "Available"
            print(f"'{item.title}' by {item.author} ({item.category}) - {status}")

def main():
    library = Library()
    
    while True:
        print("\nLibrary Management System")
        print("1. Add New Item")
        print("2. Check Out Item")
        print("3. Return Item")
        print("4. Search Items")
        print("5. Display All Items")
        print("6. Exit")
        
        choice = input("Choose an option: ")
        
        if choice == '1':
            title = input("Enter the title: ")
            author = input("Enter the author: ")
            category = input("Enter the category (Book/Magazine/DVD): ")
            library.add_item(title, author, category)
        elif choice == '2':
            title = input("Enter the title of the item to check out: ")
            library.check_out(title)
        elif choice == '3':
            title = input("Enter the title of the item to return: ")
            library.return_item(title)
        elif choice == '4':
            query = input("Enter title, author, or category to search: ")
            library.search_items(query)
        elif choice == '5':
            library.display_items()
        elif choice == '6':
            print("Exiting the program.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
